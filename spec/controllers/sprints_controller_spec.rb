# Cotopaxi | Scrum Management Tool
# Copyright (C) 2012  MHM-Systemhaus GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SprintsController do
  before do
    @project = FactoryGirl.create(:project)
    @user = FactoryGirl.create(:admin)
    sign_in @user
  end

  context "GET past_sprints" do
    before do
      get :past_sprints, id: 1
    end
    it { should respond_with :success }
  end

  context "POSTS" do
    before do
      @sprint = Sprint.new
      @sprint.duration = @project.sprint_duration
      @sprint.project = @project
      @sprint.save!
    end
    context "update" do
      def update_request
        post :update, {"sprint"=>{"state_event"=>"start"}, "project_id"=>@project.id, "id"=>@sprint.id}
      end

      context "success" do
        before {update_request}
        #it {should assign_to :sprint}
        it 'should assign to sprint' do
          assigns[:sprint].should_not be_nil
        end
        it { should respond_with :redirect }
      end

      context 'failure' do
        before do
          Sprint.any_instance.stub(:save).and_return false
          update_request
        end
        it { should respond_with :redirect }
      end
    end

  end


end
